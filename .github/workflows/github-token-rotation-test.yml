name: 'GitHub Token Rotation'

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch: {}

jobs:
  rotate-github-token:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Validate Environment Variables
        env:
          VILNACRM_APP_ID: ${{ secrets.VILNACRM_APP_ID }}
          VILNACRM_APP_PRIVATE_KEY: ${{ secrets.VILNACRM_APP_PRIVATE_KEY }}
        run: |
          if [ -z "${{ secrets.VILNACRM_APP_ID }}" ] || [ -z "${{ secrets.VILNACRM_APP_PRIVATE_KEY }}" ]; then
            if [ -z "${{ secrets.VILNACRM_APP_ID }}" ]; then
              echo "Error: VILNACRM_APP_ID is not set in secrets."
            fi
            if [ -z "${{ secrets.VILNACRM_APP_PRIVATE_KEY }}" ]; then
              echo "Error: VILNACRM_APP_PRIVATE_KEY is not set in secrets."
            fi
            exit 1
          fi
          # Validate App ID format (should be numeric)
          if ! [[ "${{ secrets.VILNACRM_APP_ID }}" =~ ^[0-9]+$ ]]; then
            echo "Error: VILNACRM_APP_ID should be a numeric value."
            exit 1
          fi
          # Validate private key format (should start with -----BEGIN)
          if ! echo "${{ secrets.VILNACRM_APP_PRIVATE_KEY }}" | grep -q "^-----BEGIN"; then
            echo "Error: VILNACRM_APP_PRIVATE_KEY should be in PEM format."
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          # Assume IAM role for GitHub Actions to access AWS resources
          role-to-assume: ${{ secrets.GITHUB_TOKEN_ROTATION_ROLE_TO_ASSUME_TEST }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS credentials
        run: |
          if ! aws sts get-caller-identity &>/dev/null; then
            echo "Error: Failed to configure AWS credentials. Details:"
            aws sts get-caller-identity >&2
            exit 1
          fi

      - name: Install PyJWT
        run: |
          pip3 install "PyJWT==2.8.0"
          installed_version=$(python3 -c "import jwt; print(jwt.__version__)" 2>/dev/null)
          expected_version="2.8.0"
          if [ -z "$installed_version" ]; then
            echo "Error: Failed to install PyJWT"
            exit 1
          elif [ "$installed_version" != "$expected_version" ]; then
            echo "Error: Incorrect PyJWT version. Expected $expected_version, got $installed_version"
            exit 1
          fi

      - name: Rotate GitHub Token
        env:
          SECRET_NAME: ${{ secrets.SECRET_NAME }}
        run: |
          chmod +x ./aws/scripts/sh/rotate_github_token.sh
          ./aws/scripts/sh/rotate_github_token.sh
