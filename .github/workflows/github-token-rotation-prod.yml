name: 'GitHub Token Rotation'

on:
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch: {}

jobs:
  rotate-github-token:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Validate Environment Variables
        run: |
          if [ -z "${{ secrets.VILNACRM_APP_ID }}" ] || [ -z "${{ secrets.VILNACRM_APP_PRIVATE_KEY }}" ]; then
            echo "Error: VILNACRM_APP_ID and VILNACRM_APP_PRIVATE_KEY must be set in secrets."
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          # Assume IAM role for GitHub Actions to access AWS resources
          role-to-assume: ${{ secrets.GITHUB_TOKEN_ROTATION_ROLE_TO_ASSUME_PROD }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS credentials
        run: |
          if ! aws sts get-caller-identity &>/dev/null; then
            echo "Error: Failed to configure AWS credentials"
            exit 1
          fi

      - name: Install PyJWT
        run: |
          pip3 install "PyJWT==2.8.0"
          if ! python3 -c "import jwt; print(jwt.__version__)" &>/dev/null; then
            echo "Error: Failed to install PyJWT"
            exit 1
          fi

      - name: Rotate GitHub Token
        env:
          SECRET_NAME: ${{ secrets.SECRET_NAME }}
        run: |
          set -euo pipefail

          echo "Generating new GitHub token..."

          # Authenticate as a GitHub App
          jwt=$(python3 -c "import jwt, time, os; print(jwt.encode({'iat': int(time.time()), 'exp': int(time.time()) + 600, 'iss': os.environ['GITHUB_APP_ID']}, os.environ['GITHUB_PRIVATE_KEY'].replace('\\n', '\n'), algorithm='RS256'))")

          # Get installation ID
          response=$(curl -s \
            -H "Authorization: Bearer $jwt" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/app/installations)

          installation_id=$(echo "$response" | jq -r '.[0].id')

          if [ -z "$installation_id" ] || [ "$installation_id" = "null" ]; then
            echo "Failed to retrieve installation ID"
            exit 1
          fi

          # Create an installation access token
          token_response=$(curl -s -X POST \
            -H "Authorization: Bearer $jwt" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/app/installations/$installation_id/access_tokens)

          NEW_TOKEN=$(echo "$token_response" | jq -r '.token')

          if [ -z "$NEW_TOKEN" ] || [ "$NEW_TOKEN" = "null" ]; then
            echo "Failed to generate new token"
            exit 1
          fi

          # Store the new token in AWS Secrets Manager
          aws secretsmanager put-secret-value --secret-id "${SECRET_NAME}" --secret-string "${NEW_TOKEN}"

          echo "GitHub token has been rotated and updated in AWS Secrets Manager."
