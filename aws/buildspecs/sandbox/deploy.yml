version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: $NODEJS_VERSION
    commands:
      - |
        if [ -z "${BRANCH_NAME}" ]; then
          echo "Error: Required environment variable BRANCH_NAME is not set or empty."
          exit 1
        fi

        if [ -z "${PR_NUMBER}" ]; then
          echo "Error: Required environment variable PR_NUMBER is not set or empty."
          exit 1
        fi
      - apk add --no-cache docker-cli docker-compose bash git make nodejs npm curl unzip jq aws-cli tar github-cli
      - npm install -g n
      - n 23.10.0
      - echo "Starting Docker daemon..."
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2 &
      - timeout 15 sh -c "until docker info; do echo 'Waiting for Docker to start...'; sleep 1; done"
      - ". ${CODEBUILD_SRC_DIR}/aws/scripts/sh/sandbox_installation.sh"
      - ". ${CODEBUILD_SRC_DIR}/aws/scripts/sh/gh_auth_login.sh"

  build:
    commands:
      - |
        COMMENT_BODY="The deployment process for the sandbox has started.
        Please wait until the latest version is ready"

        . ${CODEBUILD_SRC_DIR}/aws/scripts/sh/gh_auth_login.sh

        if ! gh pr comment "$PR_NUMBER" -R "$GITHUB_REPOSITORY" --body "$COMMENT_BODY"; then
          echo "Failed to add comment to PR"
          exit 1
        fi
      - "echo #### Build Project"
      - export WEBSITE_DIR=${WEBSITE_DIR:-/codebuild-user/website}
      - cd "$WEBSITE_DIR"
      - echo "=== Building Docker image ==="
      - docker build -t next-build -f Dockerfile --target build .
      - echo "=== Creating temporary container ==="
      - container_id=$(docker create next-build)
      - echo "=== Copying artifacts from container ==="
      - docker cp "$container_id":/app/out ./out
      - echo "=== Cleaning up container ==="
      - docker rm "$container_id"
      - ". ${CODEBUILD_SRC_DIR}/aws/scripts/sh/sanitize_branch.sh"
      - echo "=== Verifying build output ==="
      - ls -la ./out
      - 'aws s3 sync out s3://$PROJECT_NAME-$BRANCH_NAME || { echo "S3 sync failed"; exit 1; }'
      - "echo #### Create EventBridge Rule"
      - ". ${CODEBUILD_SRC_DIR}/aws/scripts/sh/create_eventbridge_rule.sh"

  post_build:
    commands:
      - |
        echo "Post-build phase: Checking if build failed to post comment..."

        if [ "$CODEBUILD_BUILD_SUCCEEDING" != "1" ]; then
          # Use the GitHub auth script with non-exit behavior for post-build
          if . ${CODEBUILD_SRC_DIR}/aws/scripts/sh/gh_auth_login.sh false; then
            COMMENT_BODY="‚ùå Sandbox Deployment Failed"$'\n'"The deployment to the sandbox environment has failed."$'\n'"Please review the CodeBuild logs and try again. üîß"

            # Post the comment to the PR
            if ! gh pr comment "$PR_NUMBER" -R "$GITHUB_REPOSITORY" --body "$COMMENT_BODY"; then
              echo "Failed to add failure comment to PR, but not failing the build for this."
            else
              echo "Successfully posted build failure comment to PR #$PR_NUMBER"
            fi
          else
            echo "GitHub authentication failed - skipping failure comment."
          fi
        else
          echo "Build succeeded - no failure comment needed."
        fi

artifacts:
  files:
    - "**/*"
